/**
 * try~ catch
 * 예외를 처리해야한다?
 * 프론트엔드(클라이언트)
 * - 사용자의 입력을 받습니다.!
 * 개발자가, 프로그래머가 모든 에러를 예측하여 처리하기가 어렵고 거의 불가능합니다.
 */

function handleSubmit(input){
    try {
        //예외가 예상되는 코드 혹은 발생시킬 코드
    } catch(error) {
        //예외를 처리하는 코드
        console.error(error) //이렇게 처리하지 않도록합니다.
        /**
         * 1. 개발자를 위한 예외처리 : 동료 개발자에게 제안을 한다는 느낌으로 만듭니다.
         * 2. 사용자를 위한 예외처리 : 사용자가 볼 수 있다고 생각합니다. 
         * 3. 사용자에게 사용을 제안하는 예외 처리
         * 4. 로그 : 에러 로그 수집 (ex. sentry => 어디가 에러가 났는지 수집이 가능합니다.)
         */

        /**
         * history.back()
         * history.go('안전한 어딘가로...')
         * clear()
         * element.focus() : 어딘가로 이동을 시켜서 다시 한번 사용자에게 알려줄 수 있습니다.
         * 비추천하지만 재귀함수를 사용. handleSubmit를 다시 시도한다던지... 등
         */
    } finally {
        //기업: 데이터 분석을 위한 로그
    }
}

//try catch 안에 try catch를 넣지 않도록 합니다. 대신 또다른 함수를 만들어 추상화를 시켜 해당 함수를 try 블록에 넣도록 합니다.
function until() {
    return //some code
}



